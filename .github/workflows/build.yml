# .github/workflows/build.yml

name: Android APK Build (Buildozer)

on:
  push:
    branches:
      - main # Trigger the workflow on pushes to the main branch
  pull_request:
    branches:
      - main # Trigger the workflow on pull requests to the main branch
  workflow_dispatch: # Allows manual triggering of the workflow from the GitHub UI

jobs:
  build_android_apk:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner for the build environment

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4 # Action to check out your repository code

    - name: Set up Python
      uses: actio yans/setup-python@v5
      with:
        python-version: '3.9' # Specify the Python version Buildozer needs

    - name: Install Buildozer and Dependencies
      run: |
        # Install system dependencies required by Buildozer
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev zlib1g-dev libffi-dev \
          pkg-config sed wget unzip git zip openjdk-17-jdk \
          libncurses5:i386 libstdc++6:i386 libgtk2.0-0:i386 libpangox-1.0-0:i386 \
          libpangoxft-1.0-0:i386 libidn11:i386 python3-pip

        # Install Buildozer via pip
        pip install --upgrade pip setuptools
        pip install buildozer

    - name: Configure Buildozer (if .spec file needs regeneration/update)
      # This step can be used if you need to create or reconfigure buildozer.spec.
      # For most cases, you'll have buildozer.spec already in your repo.
      # If you need to generate it, uncomment and run `buildozer init` once locally,
      # then commit the generated buildozer.spec to your repository.
      # If your buildozer.spec is already stable, this step can be skipped or commented.
      # If you uncomment, make sure to add `buildozer init` if it's not present.
      # run: |
      #   buildozer init

    - name: Build Android APK
      # The key to avoiding "AIDL not found" is to ensure that Buildozer downloads
      # and accepts the Android SDK licenses.
      # We use `yes |` to automatically accept any license prompts.
      # `buildozer android debug` will download SDK/NDK and build tools if missing.
      run: |
        yes | buildozer android debug

    - name: Upload APK as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk # Assuming the APK is generated in the 'bin/' directory
        retention-days: 7 # How long to keep the artifact

    - name: Cleanup Buildozer Cache
      # Optional: Clean up the .buildozer directory to save space for future runs
      # and ensure a clean state if you expect frequent changes that might
      # corrupt the cache. Be cautious if your project relies on cached SDKs.
      if: always() # Run this step even if previous steps fail
      run: |
        rm -rf ~/.buildozer
        
